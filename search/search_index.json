{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"How to Ghidra Hello \ud83d\udc4b, I will be using this repo to keep track of notes as I learn how to use Ghidra. Ghidra version At the time of this repos creation I am using version 9.04 which is not listed on the Ghidra site, which is here btw, but rather on the release tab of the github page here Goals Code analysis, - trace changes in memory (like cheatengine) Making plugins - write a static analyzer (TODO - what does a static analyzer mean?) Function Identification - this area of code is a sorting algo, or SHA-256 Check for copied code - do malware people just copy paste code from say StackOverFlow?.","title":"Home"},{"location":"#how-to-ghidra","text":"Hello \ud83d\udc4b, I will be using this repo to keep track of notes as I learn how to use Ghidra.","title":"How to Ghidra"},{"location":"#ghidra-version","text":"At the time of this repos creation I am using version 9.04 which is not listed on the Ghidra site, which is here btw, but rather on the release tab of the github page here","title":"Ghidra version"},{"location":"#goals","text":"Code analysis, - trace changes in memory (like cheatengine) Making plugins - write a static analyzer (TODO - what does a static analyzer mean?) Function Identification - this area of code is a sorting algo, or SHA-256 Check for copied code - do malware people just copy paste code from say StackOverFlow?.","title":"Goals"},{"location":"general-notes/","text":"General Notes/Cheatsheet This is a list of general notes that I think are important. There are more notes in each tutorial but I think these are the big ones. Notes","title":"General Notes"},{"location":"general-notes/#general-notescheatsheet","text":"This is a list of general notes that I think are important. There are more notes in each tutorial but I think these are the big ones.","title":"General Notes/Cheatsheet"},{"location":"general-notes/#notes","text":"","title":"Notes"},{"location":"tutorials/first-tutorial/first-tutorial/","text":"First Tutorial: Introduction to Ghidra Info Ghidra Version: 9.04 Youtube tutorial can be found here The test code we use for this tutorial is found here , the password is crackmes.one Key information Make sure Ghidra detects the format and other information correctly. Try and help the decompiler by fixing method signatures and variable names/types. Always fix the main method with int main (int argc, char** argv) . What I did Now before doing anything with the file in Ghidra,lets try and run it. I have Ubuntu 19.04 as dual boot. First I have to make it so I can run it sudo chmod a+x rev50_linux64-bit Then running the binary $ ./rev50_linux64-bit > USAGE: ./rev50_linux64-bit <password> > try again! Now we know what our objective is, Find the password . After creating a project, non-shared, and extracting the crackme file, I dragged the drag the file over into Ghidra. This is what my import screen looked like, I didnt change any of the import settings as they where all detected correctly. You can read the summary report if you want, none of it matters for this crackme. Then drag the file to the funny little green dragon in the top left and experience that very pixelated transition. Ghidra will ask if you want to analyze the file, say yes and it will bring up a list of options which you can leave as is but add Decompiler parameter ID which we want as according to the description it Creates parameter and local variables for a Function using Decompiler. which sounds very helpful. Let Ghidra do its thing, it wont take too long. Here is a screenshot of the menu. Theres only 2 sections that I think are important because the rest dont make sense to me. The symbol tree on the left middle side,and the decompiler menu on the right. The symbol tree is used to search for the main function,since every executable C/C++ program needs a main() function. The decompiler menu is important because is shows the code which is much better then looking at assembly code. So we have to find the password right? Well since we know that every executable C/C++ program needs a main() function, why dont we search for that? In the symbol tree menu,search for main . Under the functions folder you will see main Double click on that and on the right the decompiler menu will show the code. But the main() function looks weird, it shows as undefined8 main(int param_1,undefined8 *param_2) but should be something like int main(int argc, char *argv[]) I guess that means we have to replace it. Right click and select Edit Function Signature . Now replace the signature with int main (int argc, char** argv) Now if you noticed I had char** argv instead of char* argv[] . The reason for this is that Ghidra thinks that argv[] is the name of the parameter, as in it doesnt see the [] as array data type. So adding that extra * tells Ghidra that argv is a pointer to a pointer type data which results in argv being treated as an array. So this seems pretty readable now, theres some missiong data types like size_t should probably be a int since all it is doing is saving the length of the string in argv[1] . So right click on the variable and select Rename variable option and give it a name you want. We can also fix the type of that variable with Retype variable and put int The code should look like this now int main(int argc,char **argv) { int string_length; if (argc == 2) { _string_length = strlen(argv[1]); if (_string_length == 10) { if (argv[1][4] == '@') { puts(\"Nice Job!!\"); printf(\"flag{%s}\\n\",argv[1]); } else { usage(*argv); } } else { usage(*argv); } } else { usage(*argv); } return 0; } So looking at lines 9 and 10 we see that the password has to be length 10,and the 5th charater has to be an '@' symbol. So lets try 1234@67890 as the password","title":"First Tutorial"},{"location":"tutorials/first-tutorial/first-tutorial/#first-tutorial-introduction-to-ghidra","text":"","title":"First Tutorial: Introduction to Ghidra"},{"location":"tutorials/first-tutorial/first-tutorial/#info","text":"Ghidra Version: 9.04 Youtube tutorial can be found here The test code we use for this tutorial is found here , the password is crackmes.one","title":"Info"},{"location":"tutorials/first-tutorial/first-tutorial/#key-information","text":"Make sure Ghidra detects the format and other information correctly. Try and help the decompiler by fixing method signatures and variable names/types. Always fix the main method with int main (int argc, char** argv) .","title":"Key information"},{"location":"tutorials/first-tutorial/first-tutorial/#what-i-did","text":"Now before doing anything with the file in Ghidra,lets try and run it. I have Ubuntu 19.04 as dual boot. First I have to make it so I can run it sudo chmod a+x rev50_linux64-bit Then running the binary $ ./rev50_linux64-bit > USAGE: ./rev50_linux64-bit <password> > try again! Now we know what our objective is, Find the password . After creating a project, non-shared, and extracting the crackme file, I dragged the drag the file over into Ghidra. This is what my import screen looked like, I didnt change any of the import settings as they where all detected correctly. You can read the summary report if you want, none of it matters for this crackme. Then drag the file to the funny little green dragon in the top left and experience that very pixelated transition. Ghidra will ask if you want to analyze the file, say yes and it will bring up a list of options which you can leave as is but add Decompiler parameter ID which we want as according to the description it Creates parameter and local variables for a Function using Decompiler. which sounds very helpful. Let Ghidra do its thing, it wont take too long. Here is a screenshot of the menu. Theres only 2 sections that I think are important because the rest dont make sense to me. The symbol tree on the left middle side,and the decompiler menu on the right. The symbol tree is used to search for the main function,since every executable C/C++ program needs a main() function. The decompiler menu is important because is shows the code which is much better then looking at assembly code. So we have to find the password right? Well since we know that every executable C/C++ program needs a main() function, why dont we search for that? In the symbol tree menu,search for main . Under the functions folder you will see main Double click on that and on the right the decompiler menu will show the code. But the main() function looks weird, it shows as undefined8 main(int param_1,undefined8 *param_2) but should be something like int main(int argc, char *argv[]) I guess that means we have to replace it. Right click and select Edit Function Signature . Now replace the signature with int main (int argc, char** argv) Now if you noticed I had char** argv instead of char* argv[] . The reason for this is that Ghidra thinks that argv[] is the name of the parameter, as in it doesnt see the [] as array data type. So adding that extra * tells Ghidra that argv is a pointer to a pointer type data which results in argv being treated as an array. So this seems pretty readable now, theres some missiong data types like size_t should probably be a int since all it is doing is saving the length of the string in argv[1] . So right click on the variable and select Rename variable option and give it a name you want. We can also fix the type of that variable with Retype variable and put int The code should look like this now int main(int argc,char **argv) { int string_length; if (argc == 2) { _string_length = strlen(argv[1]); if (_string_length == 10) { if (argv[1][4] == '@') { puts(\"Nice Job!!\"); printf(\"flag{%s}\\n\",argv[1]); } else { usage(*argv); } } else { usage(*argv); } } else { usage(*argv); } return 0; } So looking at lines 9 and 10 we see that the password has to be length 10,and the 5th charater has to be an '@' symbol. So lets try 1234@67890 as the password","title":"What I did"}]}